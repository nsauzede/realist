require 'math'
-- global Vec3: type = @record{a: array(float32,3)}
global Vec3: type = @record{x:float32,y:float32,z:float32}

function Vec3.__add(a: Vec3, b: Vec3): Vec3
    return Vec3{a.x + b.x, a.y + b.y, a.z + b.z}
end

function Vec3.__sub(a: Vec3, b: Vec3): Vec3
    return Vec3{a.x - b.x, a.y - b.y, a.z - b.z}
end

function Vec3.__mul(t: float32, v: Vec3): Vec3
    return Vec3{t*v.x, t*v.y, t*v.z}
end

global function vmul(a: Vec3, b: Vec3): Vec3
    return Vec3{a.x*b.x, a.y*b.y, a.z*b.z}
end

function Vec3.__div(v: Vec3, t: float32): Vec3
    return Vec3{v.x / t, v.y / t, v.z / t}
end

global function vdot(v1: Vec3, v2: Vec3): float32
    return v1.x *v2.x + v1.y * v2.y + v1.z * v2.z
end

function Vec3.vdot(self: Vec3, v2: Vec3): float32
    return vdot(self, v2)
end

global function vcross(v1: Vec3, v2: Vec3): Vec3
    return Vec3{
        v1.y * v2.z - v1.z * v2.y,
        v1.z * v2.x - v1.x * v2.z,
        v1.x * v2.y - v1.y * v2.x,
    }
end

function Vec3.print(self: Vec3)
    print(self.x, self.y, self.z)
end

function Vec3.squared_length(self: Vec3): float32
    return self.x * self.x + self.y * self.y + self.z * self.z
end

function Vec3.length(self: Vec3): float32
    return math.sqrt(self:squared_length())
end

global function unit_vector(self: Vec3): Vec3
    return self / self:length()
end

function Vec3.unit_vector(self: Vec3): Vec3
    return unit_vector(self)
end

global function vreflect(self: Vec3, n: Vec3): Vec3
    return self - 2_f32 * vdot(self, n) * n
end

function Vec3.vreflect(self: Vec3, n: Vec3): Vec3
    return vreflect(self, n)
end
