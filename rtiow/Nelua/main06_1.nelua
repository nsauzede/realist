require 'C.stdio'
require 'vec'
require 'ray'

local function hit_sphere(center: Vec3, radius: float32, r: Ray)
    local oc = r.origin - center
    local a = r.direction:dot(r.direction)
    local b = 2.0 * oc:dot(r.direction)
    local c = oc:dot(oc) - radius*radius
    local discriminant = b*b - 4*a*c
    if discriminant<0 then
        return -1
    else
        return (-b - math.sqrt(discriminant)) / 2 / a
    end
end

local function color(r: Ray)
    local t = hit_sphere(Vec3{0,0,-1}, 0.5, r)
    if t > 0.0 then
        local N = (r:point_at_parameter(t) - Vec3{0,0,-1}):unit_vector()
        return 0.5*Vec3{N.x+1, N.y+1, N.z+1}
    end
    local unit_direction = r.direction:unit_vector()
    local t = 0.5 * (unit_direction.y + 1.0)
    return (1.0 - t) * Vec3{1.0, 1.0, 1.0} + t * Vec3{0.5, 0.7, 1.0}
end

local nx, ny = 200_i32, 100_i32
C.printf("P3\n%d %d\n255\n", nx,ny)
local lower_left_corner=Vec3{-2, -1, -1}
local horizontal=Vec3{4, 0, 0}
local vertical=Vec3{0, 2, 0}
local origin=Vec3{0, 0, 0}
for j=ny-1,0,-1 do
    for i=0,<nx do
        local u, v = float32(i) / nx, float32(j) / ny
        local r=Ray{origin, lower_left_corner + u*horizontal + v*vertical}
        local col = color(r)
        local ir = int32(255.99 * col.x)
        local ig = int32(255.99 * col.y)
        local ib = int32(255.99 * col.z)
        C.printf("%d %d %d\n", ir, ig, ib)
    end
end
